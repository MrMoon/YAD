{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to YAD What is YAD? YAD is a set of CLI tools that streamlines the process of building an automatic grader for C++ programming assignments. It provides a set of features that instructors and developers can incorporate into their existing automatic graders to save time and improve the grading process. Who benifits from YAD? The target audience of YAD includes instructors and developers in any programming field who are looking for ways to make the grading process more efficient and effective. Getting Started To install YAD, run the following command pip install Y4D Updating YAD To update YAD, run the following command pip install --upgrade Y4D Deleting YAD To delete YAD, run the following command pip uninstall Y4D YAD tools Isolator Isolates a function or list of functions or classes inside the code and replace them with their counterparts from the reference code. Restrictor Restricts the use of certain functions, libraries, and keywords inside the code. CheckAPI Checks if signature of all functions in the code follows all signatures in a given code. Comment Controller Extracts and deletes comments, comments out a given function or clas in the code. Supported Language Warning YAD supports C++ with versions older than C++ 11.0 Windows Users Issues In some cases YAD will be installed in a path that is not in your enivronment variables, in order to solve that do the following: Copy the path of YAD provided by pip install command in CMD. Press windows and break button, or go to settings then about. Choose Advanced system settings. Choose Environment Varibales. Press on the Path then press Edit... Press New then paste the path you copied in the first step. Press ok then ok. YAD should be ready to use in your windows CMD.","title":"Home"},{"location":"#welcome-to-yad","text":"","title":"Welcome to YAD"},{"location":"#what-is-yad","text":"YAD is a set of CLI tools that streamlines the process of building an automatic grader for C++ programming assignments. It provides a set of features that instructors and developers can incorporate into their existing automatic graders to save time and improve the grading process.","title":"What is YAD?"},{"location":"#who-benifits-from-yad","text":"The target audience of YAD includes instructors and developers in any programming field who are looking for ways to make the grading process more efficient and effective.","title":"Who benifits from YAD?"},{"location":"#getting-started","text":"To install YAD, run the following command pip install Y4D","title":"Getting Started"},{"location":"#updating-yad","text":"To update YAD, run the following command pip install --upgrade Y4D","title":"Updating YAD"},{"location":"#deleting-yad","text":"To delete YAD, run the following command pip uninstall Y4D","title":"Deleting YAD"},{"location":"#yad-tools","text":"","title":"YAD tools"},{"location":"#isolator","text":"Isolates a function or list of functions or classes inside the code and replace them with their counterparts from the reference code.","title":"Isolator"},{"location":"#restrictor","text":"Restricts the use of certain functions, libraries, and keywords inside the code.","title":"Restrictor"},{"location":"#checkapi","text":"Checks if signature of all functions in the code follows all signatures in a given code.","title":"CheckAPI"},{"location":"#comment-controller","text":"Extracts and deletes comments, comments out a given function or clas in the code.","title":"Comment Controller"},{"location":"#supported-language","text":"","title":"Supported Language"},{"location":"#windows-users-issues","text":"In some cases YAD will be installed in a path that is not in your enivronment variables, in order to solve that do the following: Copy the path of YAD provided by pip install command in CMD. Press windows and break button, or go to settings then about. Choose Advanced system settings. Choose Environment Varibales. Press on the Path then press Edit... Press New then paste the path you copied in the first step. Press ok then ok. YAD should be ready to use in your windows CMD.","title":"Windows Users Issues"},{"location":"checkAPI/","text":"CheckAPI What is CheckAPI? CheckAPI tool checks if the source.cpp file follows the compare.cpp file in term of functions and classes signatures. It can chekc if both codes are exactly the same or if source.cpp has at least all the functions and classes that are in compare.cpp. CheckAPI is dependent on Restrictor. Commands: CheckAPI source.cpp compare.cpp exactly -Checks if both files have the same functions and classes CheckAPI source.cpp compare.cpp at_least -Checks if source.cpp have at least all the functions and classes that are in compare.cpp Output options -o : followed by either n or v (not case sensitive). n : number of violation (default option). v : verbose, list of violations with a minor explanation. Example command with option: CheckAPI source.cpp compare.cpp exactly -o v","title":"CheckAPI"},{"location":"checkAPI/#checkapi","text":"","title":"CheckAPI"},{"location":"checkAPI/#what-is-checkapi","text":"CheckAPI tool checks if the source.cpp file follows the compare.cpp file in term of functions and classes signatures. It can chekc if both codes are exactly the same or if source.cpp has at least all the functions and classes that are in compare.cpp. CheckAPI is dependent on Restrictor.","title":"What is CheckAPI?"},{"location":"checkAPI/#commands","text":"CheckAPI source.cpp compare.cpp exactly -Checks if both files have the same functions and classes CheckAPI source.cpp compare.cpp at_least -Checks if source.cpp have at least all the functions and classes that are in compare.cpp","title":"Commands:"},{"location":"checkAPI/#output-options","text":"-o : followed by either n or v (not case sensitive). n : number of violation (default option). v : verbose, list of violations with a minor explanation.","title":"Output options"},{"location":"checkAPI/#example-command-with-option","text":"CheckAPI source.cpp compare.cpp exactly -o v","title":"Example command with option:"},{"location":"commentController/","text":"CommentController Whats CommentController: CommentControl tool allows the user to control comments by extracting or removing comments, or by commenting out certain classes or functions. Commands: Extract Comments: This tool will extract all the comments from a C++ file and output the comments. commentCtrl e source.cpp Extract Header: This tool will extract all header comments from a C++ file and output the comments. commentCtrl h source.cpp Delete Comments: This tool will delete all the comments from a .cpp or .h file and output the source code. commentCtrl d source.cpp Comment Out Function: This tool will comment out a function implementation from a C++ file using a function prototype and output the new code. commentCtrl f source.cpp \"function prototype\" Comment Out Class: This tool will comment out a Class implementation from a C++ file and output the new code. commentCtrl c source.cpp \"class class-name\" By default, it only comments out the class with its member functions. Adding the option '-all' comments out the all its dependent classes: commentCtrl c source.cpp \"class class-name\" -all True Output options -o followed by the path of the file you want the output to be saved in (The default is printing the output on the terminal). Example command with option: Write on a new file: commentCtrl d source.cpp -o new.cpp Write on the same file commentCtrl d source.cpp -o source.cpp For reference on how to write functions' parameters, please check the reference page","title":"CommentController"},{"location":"commentController/#commentcontroller","text":"","title":"CommentController"},{"location":"commentController/#whats-commentcontroller","text":"CommentControl tool allows the user to control comments by extracting or removing comments, or by commenting out certain classes or functions.","title":"Whats CommentController:"},{"location":"commentController/#commands","text":"","title":"Commands:"},{"location":"commentController/#extract-comments","text":"This tool will extract all the comments from a C++ file and output the comments. commentCtrl e source.cpp","title":"Extract Comments:"},{"location":"commentController/#extract-header","text":"This tool will extract all header comments from a C++ file and output the comments. commentCtrl h source.cpp","title":"Extract Header:"},{"location":"commentController/#delete-comments","text":"This tool will delete all the comments from a .cpp or .h file and output the source code. commentCtrl d source.cpp","title":"Delete Comments:"},{"location":"commentController/#comment-out-function","text":"This tool will comment out a function implementation from a C++ file using a function prototype and output the new code. commentCtrl f source.cpp \"function prototype\"","title":"Comment Out Function:"},{"location":"commentController/#comment-out-class","text":"This tool will comment out a Class implementation from a C++ file and output the new code. commentCtrl c source.cpp \"class class-name\" By default, it only comments out the class with its member functions. Adding the option '-all' comments out the all its dependent classes: commentCtrl c source.cpp \"class class-name\" -all True","title":"Comment Out Class:"},{"location":"commentController/#output-options","text":"-o followed by the path of the file you want the output to be saved in (The default is printing the output on the terminal).","title":"Output options"},{"location":"commentController/#example-command-with-option","text":"Write on a new file: commentCtrl d source.cpp -o new.cpp Write on the same file commentCtrl d source.cpp -o source.cpp For reference on how to write functions' parameters, please check the reference page","title":"Example command with option:"},{"location":"isolator/","text":"Isolator What is Isolator? Isolator tool isolates the whole code from a given function or class inside destination code and replaces the isolated function or class from source code inside destination code. It consists of two parts, IsolateFunction and IsolateClass. Commands: Isolate Function isolate f source.cpp destination.cpp \"function prototype\" Isolate Class isolate c source.cpp destination.cpp \"class class-name\" By default, it only isolates the class with its member functions. Adding the option '-all' also isolates all its dependent classes: isolate c source.cpp destination.cpp \"class class-name\" -all True How does it work? First of all the desired function\\class must have the same signature in both source and destination files, then Isolator will search for the desired function\\class inside source.cpp and take a copy of it, after that it will search for the desired function\\class inside destination.cpp. Where it will be inserted? Isolate fucntion: Non-member function: Function's prototype will be inserted in the beginnig of the code, and function's implementation will be inserted at the end of the code. Member function: The orginal function is implemented inside the class: Function will be inserted at the end of the class. The orginal function is implemented inside the class: Function's prototype will be inserted at the end of the class, and function's implementation will be inserted at the end of the code. Isolate Class: Class found in destination code: Original class will be commented and the copied class from source.cpp will be pasted in the exact place of the original class in detination.cpp Class not found in destination.cpp: The copied class from source.cpp will be pasted at the end of detination.cpp Error Scenarios: Isolate Function: Non-member Functions: Function doesn't exist in source.cpp Member Functions: Parent Class doesn't exist in destination.cpp Function doesn't exist in source.cpp Isolate Class: Class: Class doesn't exist in source.cpp Struct: Struct doesn't exist in source.cpp Note Write the class on 2 lines or more inside your .cpp file class x{} class x{ } For reference on how to write functions' parameters, please check the reference page","title":"Isolator"},{"location":"isolator/#isolator","text":"","title":"Isolator"},{"location":"isolator/#what-is-isolator","text":"Isolator tool isolates the whole code from a given function or class inside destination code and replaces the isolated function or class from source code inside destination code. It consists of two parts, IsolateFunction and IsolateClass.","title":"What is Isolator?"},{"location":"isolator/#commands","text":"","title":"Commands:"},{"location":"isolator/#isolate-function","text":"isolate f source.cpp destination.cpp \"function prototype\"","title":"Isolate Function"},{"location":"isolator/#isolate-class","text":"isolate c source.cpp destination.cpp \"class class-name\" By default, it only isolates the class with its member functions. Adding the option '-all' also isolates all its dependent classes: isolate c source.cpp destination.cpp \"class class-name\" -all True","title":"Isolate Class"},{"location":"isolator/#how-does-it-work","text":"First of all the desired function\\class must have the same signature in both source and destination files, then Isolator will search for the desired function\\class inside source.cpp and take a copy of it, after that it will search for the desired function\\class inside destination.cpp.","title":"How does it work?"},{"location":"isolator/#where-it-will-be-inserted","text":"","title":"Where it will be inserted?"},{"location":"isolator/#isolate-fucntion","text":"Non-member function: Function's prototype will be inserted in the beginnig of the code, and function's implementation will be inserted at the end of the code. Member function: The orginal function is implemented inside the class: Function will be inserted at the end of the class. The orginal function is implemented inside the class: Function's prototype will be inserted at the end of the class, and function's implementation will be inserted at the end of the code.","title":" Isolate fucntion: "},{"location":"isolator/#isolate-class_1","text":"Class found in destination code: Original class will be commented and the copied class from source.cpp will be pasted in the exact place of the original class in detination.cpp Class not found in destination.cpp: The copied class from source.cpp will be pasted at the end of detination.cpp","title":" Isolate Class:"},{"location":"isolator/#error-scenarios","text":"","title":"Error Scenarios:"},{"location":"isolator/#isolate-function_1","text":"Non-member Functions: Function doesn't exist in source.cpp Member Functions: Parent Class doesn't exist in destination.cpp Function doesn't exist in source.cpp","title":"Isolate Function:"},{"location":"isolator/#isolate-class_2","text":"Class: Class doesn't exist in source.cpp Struct: Struct doesn't exist in source.cpp","title":"Isolate Class:"},{"location":"reference/","text":"References Below are examples of how to write the function's parameter Non-member Functions: Normal Function: simply write the function prototype, such as: \"int sum(int , int)\" Template Function write the function prototype along with the template definition: \"template <typename T> T myMax1(T &, T)\" Function with array parameter: \"int print_array(int size, int a *)\" Member Functions: Normal & Template Fucntions: You need to add the name of the parent class: \"template <typename T> T MyClass:: myMax2(T &, T)\" \"void MyClass:: print()\" Static: Write the static key word at the beginning of the prototype: \"static void MyClass::eat()\" const: \"double MyClass:: getArea() const\" virtual: \"virtual double MyClass:: getArea() const\" pure virtual: \"virtual double MyClass:: getArea() const = 0\" constructor: \"MyClass :: MyClass()\" initiaizer list: \"MyClass :: MyClass(int, double, char) : myInt()\" copy constructor: \"MyClass :: MyClass(const MyClass&)\" destructor: \"MyClass :: ~MyClass()\"","title":"Reference"},{"location":"reference/#references","text":"Below are examples of how to write the function's parameter Non-member Functions: Normal Function: simply write the function prototype, such as: \"int sum(int , int)\" Template Function write the function prototype along with the template definition: \"template <typename T> T myMax1(T &, T)\" Function with array parameter: \"int print_array(int size, int a *)\" Member Functions: Normal & Template Fucntions: You need to add the name of the parent class: \"template <typename T> T MyClass:: myMax2(T &, T)\" \"void MyClass:: print()\" Static: Write the static key word at the beginning of the prototype: \"static void MyClass::eat()\" const: \"double MyClass:: getArea() const\" virtual: \"virtual double MyClass:: getArea() const\" pure virtual: \"virtual double MyClass:: getArea() const = 0\" constructor: \"MyClass :: MyClass()\" initiaizer list: \"MyClass :: MyClass(int, double, char) : myInt()\" copy constructor: \"MyClass :: MyClass(const MyClass&)\" destructor: \"MyClass :: ~MyClass()\"","title":"References"},{"location":"restrictor/","text":"Restrcitor What is Restrictor? The Restrictor CLI tool allows the user to restrict the use of certain criterion or many criteria in a source file, the restriction follows one of three types of restrition explained below. Types of Restriction: at_least: must contain the search criterion in source.cpp, other components of the same criterion can exist. exactly: must contain the search criterion in source.cpp, other components of the same criterion must not exist (not available for keyword criterion, explained below). forbidden: must not contain the search criterion, other components of the same criterion can exist. How does a single criterion restriction work? Each criterion has a unique character to use with the command, the characters are explained below, the output of the commands is True (following restriction) or False (not following restriction): l: used for restricting libraries, must input only the library name, this is the only criteria that doesn't allow scope definition (don't input #include). k: used for restricting keywords, this feature does an exact match search need so you need to input the exact keyword you are looking for (can be used to find recursion or iteration). Important note : preferably don't use global scope, specify a certain scope for accuracy. c: used for restricting classes, input class prototype. f: used for restricting functions without access types (functions outside of classes), input function prototype. a: used for restricting functions with their access types (Public/Protected/Private), input function access type followed by function prototype. Example Commands: l: restrict l source.cpp exactly iostream Checking if only iostream exists in code (it must exist). k: restrict k source.cpp at_least follow \"int follow(int, int)\" Checking recursion exists (it must exist). c: restrict c source.cpp forbidden \"class shape\" global Checking if class shape exists in code (it must not exist). f: restrict f source.cpp at_least \"int follow(int, float)\" global Checking if function int follow(int, float) exists (it must exist). a: restrict a source.cpp exactly \"float shape::area()\" \"class shape\" private Checks if the only private function in class shape is area() (it must exist). How does many criteria restriction work? r: used for restricting source file according to a YAML restrictions file, the format of the restrictions file is explained in Restrictions File section found below. Many Criteria Command: restrict r source.cpp rules.YAML -Returns the number of missing functions/classes following by the number of extra functions/classes. Output Options This command includes an output option -o , the output option is follow by n (number of missing and extra functions) which is the default value or v (verbose, a list of violations with a simple explanation) both n and v are not case sensitive, an example command including v: restrict r source.cpp rules.YAML -o v -Returns a list of violations with minor explanation. Restriction File Structure: The restrictions file is a YAML file type, this file is required for the functionality of the many criteria command. Criteria supported: libraries, keywords, classes, functions, public functions, private functions or protected Functions. For each criteria: Restriction: at_least exactly forbidden Scope: Choose the scope of restriction, such as \"int functionC(int, int)\" Default value of scope is global when left empty. Names: Specify what you want to restrict. Restrictions File Example You can find the sample file in the GitHub files or below: libraries: restriction: at_least scope: global names: - algorithm - iostream keywords: restriction: exactly scope: int functionC(int, int) names: - functionC classes: restriction: exactly scope: global names: - class test - class Aclass functions: restriction: exactly scope: global names: - int functionA(int, int) - template <typename T> int functionD(T) - int * functionE(int, int) - int ** functionF(int, int) - int functionJ(int &) - int functionK(int *) private_functions: restriction: exactly scope: global names: - int test::functionG(int, int) const - virtual void test::functionH() - static int test::functionI(int, int) Error Scenarios: YAML file with syntax error: For example if the yaml file contained \"libary\" instead of \"library\", restrictor will not check for libraries and return an answer as if the \"library\" criterion was empty. YAML file with logical error: For example if the yaml file contained a keyword with \"exactly\" restriction and after that the same keyword with \"forbidden\" restriction, the last occurance in the file will be applied.","title":"Restrictor"},{"location":"restrictor/#restrcitor","text":"","title":"Restrcitor"},{"location":"restrictor/#what-is-restrictor","text":"The Restrictor CLI tool allows the user to restrict the use of certain criterion or many criteria in a source file, the restriction follows one of three types of restrition explained below.","title":"What is Restrictor?"},{"location":"restrictor/#types-of-restriction","text":"at_least: must contain the search criterion in source.cpp, other components of the same criterion can exist. exactly: must contain the search criterion in source.cpp, other components of the same criterion must not exist (not available for keyword criterion, explained below). forbidden: must not contain the search criterion, other components of the same criterion can exist.","title":"Types of Restriction:"},{"location":"restrictor/#how-does-a-single-criterion-restriction-work","text":"Each criterion has a unique character to use with the command, the characters are explained below, the output of the commands is True (following restriction) or False (not following restriction): l: used for restricting libraries, must input only the library name, this is the only criteria that doesn't allow scope definition (don't input #include). k: used for restricting keywords, this feature does an exact match search need so you need to input the exact keyword you are looking for (can be used to find recursion or iteration). Important note : preferably don't use global scope, specify a certain scope for accuracy. c: used for restricting classes, input class prototype. f: used for restricting functions without access types (functions outside of classes), input function prototype. a: used for restricting functions with their access types (Public/Protected/Private), input function access type followed by function prototype.","title":"How does a single criterion restriction work?"},{"location":"restrictor/#example-commands","text":"l: restrict l source.cpp exactly iostream","title":"Example Commands:"},{"location":"restrictor/#how-does-many-criteria-restriction-work","text":"r: used for restricting source file according to a YAML restrictions file, the format of the restrictions file is explained in Restrictions File section found below.","title":"How does many criteria restriction work?"},{"location":"restrictor/#many-criteria-command","text":"restrict r source.cpp rules.YAML -Returns the number of missing functions/classes following by the number of extra functions/classes.","title":"Many Criteria Command:"},{"location":"restrictor/#output-options","text":"This command includes an output option -o , the output option is follow by n (number of missing and extra functions) which is the default value or v (verbose, a list of violations with a simple explanation) both n and v are not case sensitive, an example command including v: restrict r source.cpp rules.YAML -o v -Returns a list of violations with minor explanation.","title":"Output Options"},{"location":"restrictor/#restriction-file-structure","text":"The restrictions file is a YAML file type, this file is required for the functionality of the many criteria command. Criteria supported: libraries, keywords, classes, functions, public functions, private functions or protected Functions. For each criteria: Restriction: at_least exactly forbidden Scope: Choose the scope of restriction, such as \"int functionC(int, int)\" Default value of scope is global when left empty. Names: Specify what you want to restrict.","title":"Restriction File Structure:"},{"location":"restrictor/#restrictions-file-example","text":"You can find the sample file in the GitHub files or below: libraries: restriction: at_least scope: global names: - algorithm - iostream keywords: restriction: exactly scope: int functionC(int, int) names: - functionC classes: restriction: exactly scope: global names: - class test - class Aclass functions: restriction: exactly scope: global names: - int functionA(int, int) - template <typename T> int functionD(T) - int * functionE(int, int) - int ** functionF(int, int) - int functionJ(int &) - int functionK(int *) private_functions: restriction: exactly scope: global names: - int test::functionG(int, int) const - virtual void test::functionH() - static int test::functionI(int, int)","title":"Restrictions File Example"},{"location":"restrictor/#error-scenarios","text":"YAML file with syntax error: For example if the yaml file contained \"libary\" instead of \"library\", restrictor will not check for libraries and return an answer as if the \"library\" criterion was empty. YAML file with logical error: For example if the yaml file contained a keyword with \"exactly\" restriction and after that the same keyword with \"forbidden\" restriction, the last occurance in the file will be applied.","title":"Error Scenarios:"}]}